# try 1
import os

email_txt = "C:\\Users\\HE10\\Desktop\\Macros\\STEP\\DEV\\30 Days of python\\Day 10\\Templates\\email.txt"

content = ""

with open(email_txt, 'r') as f:
        content = f.read()


print(content.format(name='Bro'))

# try 2
import os

this_file_path = os.path.abspath(__file__)
#print(this_file_path)
BASE_DIR =  os.path.dirname(this_file_path)
ENTIRE_PROJECT_DIR = os.path.dirname(BASE_DIR)
#print(BASE_DIR, ENTIRE_PROJECT_DIR)

email_txt = os.path.join(BASE_DIR, "Templates", "email.txt")

content = ""

with open(email_txt, 'r') as f:
        content = f.read()


print(content.format(name='Bro'))

# reading from a file that has a specific path

import os

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
files_dir = os.path.join(BASE_DIR, 'images')

if not os.path.exists(files_dir):
    print('This is not a valid path')

# making a file and generating images 

import os

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
files_dir = os.path.join(BASE_DIR, 'images')

os.makedirs(files_dir, exist_ok=True)

my_images = range(0, 12)

for i in my_images:
        fname = f"{i}.jpg"
        file_path = os.path.join(files_dir, fname)
        if os.path.exists(file_path):
                print(f'skipped fname')
                continue
        with open(file_path, 'w') as f:
                f.write('Hello world')


# Importing an image from an url

import os
import requests

THIS_FILE_PATH = os.path.abspath(__file__)
BASE_DIR = os.path.dirname(THIS_FILE_PATH)
DOWNLOAD_DIR = os.path.join(BASE_DIR, "downloads")
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

downloaded_img_path = os.path.join(DOWNLOAD_DIR, '1.jpg')
url = "https://cdn.britannica.com/97/158797-050-ABECB32F/North-Cascades-National-Park-Lake-Ann-park.jpg"


r = requests.get(url, stream=True)
r.raise_for_status() #200
with open(downloaded_img_path, 'wb') as f:
    f.write(r.content)

Day 11
# class - allows to attach state-like items to them
class Animal:
    noise = 'Rrrr' 
    # noise is a propriety of the class - attached to a class
    def make_noise(self):
        print(f"{self.noise}")
        
    def set_noise(self, new_noise):
        self.noise = new_noise 
# code writen in the terminal 
"""
>>> obj = Animal()
>>> obj.noise()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object is not callable
>>> obj.noise  
'Rrrr'
>>> obj.set_noise("Hmmmm")
>>> obj.noise
'Hmmmm'
>>> obj.make_noise()
Hmmmm
>>> abc = Animal()
>>> abc.make_noise()
Rrrr
>>> abc.set_noise("Another noise")
>>> abc.make_noise() 
Another noise
>>> obj.make_noise()
Hmmmm
>>>
"""
# continuation
# class - allows to attach state-like items to them
class Animal:
    noise = 'Rrrr' 
    color = 'Red'
    # noise is a propriety of the class - attached to a class
    def make_noise(self):
        print(f"{self.noise}")
    def set_noise(self, new_noise):
        self.noise = new_noise  
    def get_noise(self):
        return self.noise
    def set_noise(self, new_noise):
        self.noise = new_noise
        return self.noise
    def get_color(self):
        return self.color
    def set_color(self, new_color):
        self.noise = new_color
        return self.color
    
# Inheritance
class Wolf(Animal):
    noise = 'grrrrrr'
    
# Inheritance

class Wolf(Animal):
    noise = 'grrrrrr'

class BabyWolf(Wolf):
    color = 'grey'

# code writen in the terminal 
python3 -i animals.py
>>> Wolf
<class '__main__.Wolf'>
>>> a = Wolf()
>>> a.make_noise()
grrrrrr
python3 -i animals.py
>>> BabyWolf
<class '__main__.BabyWolf'>
>>> obj = BabyWolf()
>>> obj.make_noise()
grrrrrr
>>> obj.get_color()
'grey'
>>>

